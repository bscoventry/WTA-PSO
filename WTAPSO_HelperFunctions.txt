# -*- coding: utf-8 -*-
"""
Created on Mon Jul 09 21:33:39 2018

@author: Brandon S Coventry. Weldon School of Biomedical Engineering Purdue University
Purpose: This file holds helper functions which are used to assist in swarm creation and running
Revision History: N/A
Notes: Reference: Coventry et al., 2017 J. Comput Neurosci
"""
import numpy as np
from AgentClass import *    
def genSwarmNetwork(swarmsize,nummem,matrixdim,minerr):
    """ This function will generate the swarm network for use in running WTAPSO. Will do so by iterating through
    the agents performance and setting up a matrix to dictate each agents position in the swarm. """
    neisize = np.floor(swarmsize/nummem)
    k = 0
    N = np.zeros([matrixdim[0],matrixdim[1]])
    for jj in range(swarmsize):
        if k <= nummem-1:
            N[k,np.mod(jj,neisize)] = jj
        else:
            k = 0
            N[k,np.mod(jj,neisize)] = jj
        k = k + 1
    #If agent 21 isn't a leader, then all agents are placed except 21. We swap it in for the global leader
    errind = np.where(N==minerr) #Find where best agent is in the matrix
    if minerr != swarmsize-1:
        N[errind[0],errind[1]] = swarmsize
    sizes = N.shape
    return [N,sizes,neisize]
def updateSwarmNetwork(N,sizes,neisize,minerr):
    """ This function is used to update the N matrix (matrix containing neighborhood agent information) in the update step
    of the WTAPSO. To be used after the first run of the swarm and all consequent update steps. """
    errind = np.where(N == minerr)
    if minerr != swarmsize-1:
        N[errind[0],errind[1]] = swarmsize
    sizes = N.shape
    N[errind[0],errind[1]] = ssize             # Replace the best (it will have its own holder) with agent 21
    sizes = N.shape
    row = sizes[0]                              #Get the matrix dimensions
    col = sizes[1]
    for kk in range(col):                     #Iterate through neighborhoods, which are columns of N
        curcol = kk
        agentvals = N[:,kk]
        errv = np.zeros(len(agentvals))
        for ll in range(len(agentvals)):
            curagent = swarm[int(agentvals[ll]-1)]
            errv[ll] = curagent[0,2]
        minern = np.where(errv==np.min(errv))
        neibest[kk] = agentvals[minern[0][0]]
    minerr = np.argmin(errorvec)
    agenterrorbest = swarm[minerr]
    agenterrbest = agenterrorbest[0,3]
    return [N,sizes,neisize,agenterrorbest,agenterrbest,minerr]

def updateSwarm(swarmup,errorvec,bestagent,neibest,row,col):
    """ This function updates the swarm. Loops through and finds global and local leaders
    and reorganizes the swarm based on these values."""
    #bestagent = swarmup[minerr]        #Grab the current swarm leader
    neibesterrors = errorvec[neibest.astype(int)-1]     #Grab neighborhood leader values
    neibesterr = np.min(neibesterrors)
    if np.size(neibesterr)>1:
        neibesterr = neibesterr[1]            #In case of duplicate, choose first one
    errneibestindex = np.where(errorvec==neibesterr)   #Find now where in the swarm the neighborhood leaders are
    bestneileader = swarmup[errneibestindex[0][0]]       #Grab the best performing neighborhood leader
    bestagent.updateAgent(bestagent.returnFitness(),bestneileader.returnFitness)   #Update the best agent
    swarmup[minerr] = bestagent                #After update, return agent to swarm
    #Next update neighborhood leaders
    for nn in range(col):           #Iterate over columns of N update matrix
        updateneibest = neibest[nn]    #Grab the location of the current neighborhood best leader
        update = swarmup[int(updateneibest)-1]     #Grab that agent from the swarm.
        neighbor = N[:,nn]          #Grab neighborhood agents. These are needed for updates of the best leaders
        neierrvec = errorvec[neighbor.astype(int)-1]     #Grab error(fitness) values for the neighbor
        neighbesterr = np.min(neierrvec)        #Now we find the neighbor who is doing the best
        if np.size(neighbesterr)>1:
            neighbesterr = neighbesterr[0]         #If multiple choose first one
        bestneigh = np.where(errorvec==neighbesterr)        #Find location of the best neighbor
        updateneigh = swarmup[bestneigh[0][0]-1] #Now that we have found the best neighbor, we grab him from the swarm
        #Okay, so neighborhood leaders draw influence from the best agent and the best performing neighborhood agent
        update.updateAgent(bestagent.returnFitness(),updateneigh.returnFitness)
        swarmup[int(updateneibest)-1] = update
    #Finally, update Neighborhood values
    for mm in range(col):           #We are going to again poll the neighborhood
        currentneigh = N[:,mm]      #Iterate through the neighborhood
        currentneiwhere = np.where(currentneigh!=neibest[mm])       #Find positions of all neighborhood agents who are not leaders
        currentneigh = currentneigh[currentneiwhere]       #As we so oft do, store locations in an array
        upneibest = swarmup[int(neibest[mm])-1]          #Since this guy is defined as a neighborhood leader, he will default be a part of the individual neighbor update
        for ii in range(len(currentneigh)):     #Update individual neighbors
            upvar = swarmup[int(currentneigh[ii])-1]     #Grab the agent from the swarm
            neierrvecindwhere = np.where(currentneigh!=currentneigh[ii])    #Grab error function values
            neierrvecind = currentneigh[neierrvecindwhere]
            neierrvec = errorvec[(neierrvecind.astype(int))-1]
            neierrvec = np.min(neierrvec)       #Grab agent who is performing best
            if np.size(neierrvec) > 1:
                neierrvec = neierrvecp[0]       #If multiple, grab the first one
            bnei = np.where(errorvec==neierrvec)
            upN = swarmup[bnei[0][0]]                   #Pull agent from swarm
            #Updates will occur based on the neighborhood leader and best performing neighbor that is not the neighbor under update
            upvar.updateAgent(upneighbest.returnFitness,upN.returnFitness)
            swarmup[int(currentneigh[ii])-1] = upvar
    return swarmup